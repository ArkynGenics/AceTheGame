/*
 * This Java source file was generated by the Gradle 'init' task.
 * template from https://docs.oracle.com/javase/8/javafx/get-started-tutorial/hello_world.htm
 */
package modder;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import java.util.List;
import java.util.ArrayList;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    // workaround for java 11 since app built with
    // "gradle build", will be missing javaFX lib
    // https://stackoverflow.com/questions/59771324/error-javafx-runtime-components-are-missing-and-are-required-to-run-this-appli
    public static class RealApp extends Application {
        final int width = 587;
        final int height = 612;

        @Override
        public void start(Stage primaryStage) {

            if (!Util.DoesCommandExist("adb")) {
                GuiUtil.ShowAlert("Adb Command doesn't exist", "", "Command \"adb\" not found in PATH");
                return;
            }

            // ====================================================
            List<String> output = new ArrayList<String>();

            // test if adb shell can be connected by echoing in
            // the shell and check the output
            output = Util.RunCommand("adb", "shell echo test");
            if (output.size() >= 1) {
                if (!output.get(0).equals("test")) {
                    System.out.println();

                    GuiUtil.ShowAlert("Adb Shell Error",
                            String.format("Error connecting to adb shell: \"%s\" ", output.get(0)),

                            "Have you connected android device to your computer?");
                    return;
                }

            } else {
                GuiUtil.ShowAlert("Adb Shell Error", "", "Error connecting to adb shell: Empty Output");
                return;

            }

            // everything looks okay
            output = Util.RunCommand("adb", "shell pm list packages");
            output.forEach(s -> System.out.println(s));

            // ========================== init gui =================
            //
            StackPane root = new StackPane();
            Scene scene = new Scene(root, width, height);
            // ============== set button ================
            Button btn = new Button();
            btn.setText("Get Size");
            btn.setOnAction(new EventHandler<ActionEvent>() {

                @Override
                public void handle(ActionEvent event) {
                    System.out.println("width: " + scene.getWidth() + " height: " + scene.getHeight());
                }
            });

            root.getChildren().add(btn);
            // ==========================================

            primaryStage.setTitle("Hello World!");
            primaryStage.setScene(scene);
            primaryStage.setMaximized(true);
            // primaryStage.setFullScreen(true);
            primaryStage.show();
        }

    }

    public static void cliInit() {
        AdbShell adbShell = new AdbShell();
        AdbShell.Output out = adbShell.Run("pm list packages");
        if (out.error != AdbShell.Error.ok) {
            System.out.println("can't connect to adb shell:");
            out.strings.forEach(s -> System.out.println(s));
            return;
        }
        // output will look like
        // package:com.android.offfice
        // package:com.vivo.appstore
        // "package:" should be trimmed for better view
        for (int i = 0; i < out.strings.size(); i++) {
            // use the caret symbol '^'
            // to match the beggining of the pattern
            String new_str = out.strings.get(i).replaceFirst("^package:", "");
            System.out.printf("%d %s\n", i, new_str);
        }
        System.out.printf("Found %d packages\n", out.strings.size());

    }

    public static void main(String[] args) {
        // Some testing
        if (Util.DoesCommandExist("gdb")) {
            System.out.println("gdb exist");
        } else {
            System.out.println("gdb doesn't exist");

        }

        if (Util.DoesCommandExist("ACE")) {
            System.out.println("ACE exist");
        } else {
            System.out.println("ACE doesn't exist");

        }

        // gui
        // Application.launch(RealApp.class);
        // cli app
        cliInit();

    }
}