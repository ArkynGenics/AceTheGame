/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package modder

import modder.Util.ArrayConcat
import modder.Util.DoesCommandExist
import modder.Util.RunCommand
import org.apache.commons.lang3.SystemUtils
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test

internal class TestUtil {
    @Test
    fun DoesCommandExist() {
        // commands that should exit on windows and unix like OS
        Assertions.assertEquals(true, DoesCommandExist("ping"))
        // some random command that will never exist
        Assertions.assertEquals(false, DoesCommandExist("wioiofj902jnci43b199u"))
        Assertions.assertEquals(false, DoesCommandExist("u3902u9hbrnodooej2hwioehfwejof"))
        Assertions.assertEquals(false, DoesCommandExist("3490t433ocworo3i40ehfh"))
        Assertions.assertEquals(false, DoesCommandExist("93u09u904utoidwwht4j39"))
    }

    @Test
    fun ArrayConcat() {
        Assertions.assertArrayEquals(arrayOf("hello", "world"),
                ArrayConcat(arrayOf("hello"), arrayOf("world")))
        Assertions.assertArrayEquals(arrayOf("hello", "world", "goodbye"),
                ArrayConcat(arrayOf("hello", "world"), arrayOf("goodbye")))
        Assertions.assertArrayEquals(arrayOf("hello", "world", "goodbye", "nice", "good"),
                ArrayConcat(arrayOf("hello", "world"), arrayOf("goodbye", "nice", "good")))

        // when empty
        Assertions.assertArrayEquals(arrayOf<String>(),
                ArrayConcat(arrayOf(), arrayOf<String>()))
        Assertions.assertArrayEquals(arrayOf<Int>(),
                ArrayConcat(arrayOf(), arrayOf<Int>()))
        // when NULL
        Assertions.assertArrayEquals(
                null,
                ArrayConcat(null, null))
    }

    @Test
    fun RunCommand() {

        // test RunCommand on echo command, because it is one of command
        // which ouput can be controlled

        // only run this test on unix like system
        // because windows's echo command seems to be built in to the shell
        // not a binary, so it can't executed it on windows
        if (SystemUtils.IS_OS_UNIX) {
            var output: List<String> = ArrayList()
            output = RunCommand("echo", mutableListOf<String>("hello"))
            Assertions.assertIterableEquals(mutableListOf<String>("hello"), output)
            output = RunCommand("echo", mutableListOf<String>("hello world"))
            Assertions.assertIterableEquals(mutableListOf<String>("hello world"), output)
            output = RunCommand("echo", mutableListOf<String>("hello and goodbye world"))
            Assertions.assertIterableEquals(mutableListOf<String>("hello and goodbye world"), output)
            output = RunCommand("echo", mutableListOf<String>("hello\nworld"))
            Assertions.assertIterableEquals(mutableListOf<String>("hello", "world"), output)
            output = RunCommand("echo", mutableListOf<String>("hello\nworld\nbye"))
            Assertions.assertIterableEquals(mutableListOf<String>("hello", "world", "bye"), output)

            // check if it can also run binary from absolute path
            output = RunCommand("/usr/bin/echo", mutableListOf<String>("hello\nworld\nbye"))
            Assertions.assertIterableEquals(mutableListOf<String>("hello", "world", "bye"), output)
        }
    }
}
