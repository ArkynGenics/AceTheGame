#pragma once
#include "../third_party/CLI11.hpp"
#include <functional>
#include <stdlib.h>
#include <string>

class frontend {
private:
  static const size_t buff_size = 10000;
  /*
   * output buffer for the frontend
   * generated by print_core
   * */
  static std::string output_buff;

public:
  /*
   * return current frontend buffer
   * and clear it out
   * */
  static std::string pop_buff();

  /*
   * return current frontend output buffer
   * without clearing it
   * */
  static std::string get_buff();

  /**
   * ACE's main function for printing to frontend and logging
   *
   * [print_to_stdout]: print the string to stdout
   * [store_to_buff]: store the string to a buffer, which then
   * 		    can be read using [pop_buff]
   * 		    or [get_buff]
   * */
  static void print_core(bool print_to_stdout, bool store_to_buff,
                         const char *fmt, va_list args);

  static void _print(bool print_to_stdout, const char *fmt, ...);
  static void print(const char *fmt, ...);

  static void log(const char *fmt, ...);
  /*
   * tells frontend invalid command is sent
   * */

  static void invalid_command(bool print_to_stdout, const char *fmt, ...);
  /*
   * mark a task has failed
   * to frontend
   * */
  static void mark_task_fail(const char *fmt, ...);

  /*
   * mark a progress of a certain task
   * */
  static void mark_progress(size_t current, size_t max);

  /*
   * handle parsing error from cli and tell that error
   * to frontend
   * */
  static void handle_cli_parse_error(bool print_to_stdout,
                                     const CLI::ParseError &e);
};